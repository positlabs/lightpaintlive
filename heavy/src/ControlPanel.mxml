<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="setup()" focusEnabled="false">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			
			private var main : LightPaintLiveDesktop;
			
			[Bindable]
			private var currentFPS : int;
			private var getFPSTimer : Timer = new Timer(3000);
			[Bindable]
			public static var resolutionSelectedIndex : int = 2;
			
			private function setup():void{
				main = LightPaintLiveDesktop.getInstance();
				
				var camlist : ArrayList = populateCamSelector();

				// set index to selected cam
				for (var i:int = 0; i < camlist.length; i++) {
					camSelector.selectedIndex = WebCam.selectedCamIndex;
				}
				
				getFPSTimer.addEventListener(TimerEvent.TIMER, getFPS);
				getFPSTimer.start();
				
				// hide the lower 3 options groups, since they are used the least
				toggleVisible(webcamOpts, webcamOptsLabel);
//				toggleVisible(recordingOpts, recordingOptsLabel);
				toggleVisible(viewOpts, viewOptsLabel);
			}
			
			private function getFPS(e:TimerEvent):void{
				currentFPS = main.webcam.currentFPS;
			}
			
			private function selectCamera(camName : String):void{
				var camIndex : int;
				
				for (var i:int = 0; i < Camera.names.length; i++) {
					if(camName == Camera.names[i])camIndex = i;
				}
				
				main.changeCamera(camIndex);
			}
			
			/**
			 * Used to get list of all available cameras
			 * Call this whenever the cam selector is clicked in case user plugged in a new cam
			 */
			private function populateCamSelector():ArrayList{
				// get webcam options
				var camNames : ArrayList = new ArrayList();
				camNames.source = Camera.names;
				camSelector.dataProvider = camNames;	
				return camNames;
			}
			
			private var oldR : int;
			private var oldG : int;
			private var oldB : int;
			private var oldBright : int;
			
			/** brightnessSlider.change() 
			 * brightness represents total of rgb values, so split total into rgb channels*/
			private function moveBrightnessSlider():void{
				var delta : int = brightnessSlider.value - oldBright;
				hueSliderR.value = oldR + delta/3;
				hueSliderG.value = oldG + delta/3;
				hueSliderB.value = oldB + delta/3;
			}
			
			/** brightnessSlider.changeEnd() */
			private function changeBrightness():void{
				WebCam.hueShift(hueSliderR.value + brightnessSlider.value, hueSliderG.value + brightnessSlider.value, hueSliderB.value + brightnessSlider.value);
			}
			
			/** toggles visibility of a control panel group */
			private function toggleVisible(targGroup : Group, targLabel : Label):void{
				targGroup.visible = targGroup.includeInLayout = !targGroup.visible;
				var plusMinus : String = "";
				targGroup.visible ? plusMinus = "-" : plusMinus = "+";
				
				targLabel.text = targLabel.text.slice(0, targLabel.text.length-3) + plusMinus + " ]";
			}
			
			private function updateHueColor():void{
//				var brightness : uint = (256 + Math.max( Math.min(brightnessSlider.value, 255), -255 )) * .5;
				var red : uint = (255 + hueSliderR.value) * .5;
				var green : uint = (255 + hueSliderG.value) * .5;
				var blue : uint = (255 + hueSliderB.value) * .5;
				hueShiftColor.color = red << 16 | green << 8 | blue;
//				hueShiftBrightness.color = brightness << 16 | brightness << 8 | brightness;
			}
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="notPainting"/>
		<s:State name="painting"/>
	</s:states>
	
		<s:Rect visible="{advancedControls.visible}" left="-5" top="-5" width="{advGroup.width+10}"
				height="{advGroup.height+10}">
			<s:fill>
				<s:SolidColor alpha=".8" color="black"/>
			</s:fill>
		</s:Rect>
		<s:VGroup id="advGroup" width="100%" horizontalAlign="center">
			<s:Button id="advCtrlBtn" width="200" height="30"
					  label="{advancedControls.visible ? 'control panel [ - ]' : 'control panel [ + ]' }"
					  click="advancedControls.visible = !advancedControls.visible"
					  focusEnabled="false" skinClass="skins.LPLButtonSkin"/>
			<s:VGroup id="advancedControls" visible="false" width="200" color="white">
				
				<s:Rect height="10"/>
				
				<s:Label id="paintingOptsLabel" buttonMode="true"
						 click="toggleVisible(paintingOpts, paintingOptsLabel);" color="cyan"
						 fontSize="14" fontWeight="bold" text="painting options [ - ]"/>
				<s:VGroup id="paintingOpts">
						
					<s:VGroup width="100%"
							  enabled.painting="false">
						
						<s:VGroup>
							<s:HGroup>
								<s:Rect width="13"/>
								<s:Label text="lower limit"/>
							</s:HGroup>
							<s:HGroup width="100%">
								<s:Rect width="13"/>
								<s:HSlider id="lowerLimitSlider" width="100%"
										   changeEnd="main.webcam.lightRange(lowerLimitSlider.value);"
										   focusEnabled="false" maximum="100" minimum="0" value="0"/>
								<s:Label width="55" fontWeight="bold"
										 text="{'low: ' + lowerLimitSlider.value.toString()}"/>
							</s:HGroup>
						</s:VGroup>
						
						<s:CheckBox id="delayCheckBox" label="countdown" focusEnabled="false"
									toolTip="{Tooltips.delayCheckBox}"/>
						<s:HGroup visible="{delayCheckBox.selected}" width="100%"
								  includeInLayout="{delayCheckBox.selected}">
							<s:Rect width="13"/>
							<s:HSlider id="delaySlider" visible="{delayCheckBox.selected}"
									   width="100%" focusEnabled="false"
									   includeInLayout="{delayCheckBox.selected}" maximum="20"
									   minimum="1" value="1"/> 
							<s:Label width="35" fontWeight="bold" text="{delaySlider.value + ' s '}"/>
						</s:HGroup>
					</s:VGroup>
					
					<s:CheckBox id="underlayerCheckbox" label="video underlayer"
								change="main.webcam.underlayer(underlayerCheckbox.selected)"
								focusEnabled="false"/>

					<!--	
						<s:HGroup visible="{lightRangeCheckBox.selected}" width="100%"
								  includeInLayout="{lightRangeCheckBox.selected}">
							<s:Rect width="13"/>
							<s:HSlider id="upperLimitSlider" width="100%"
									   change="lowerLimitSlider.value = Math.min(upperLimitSlider.value, lowerLimitSlider.value)"
									   changeEnd="main.webcam.lightRange(lowerLimitSlider.value, upperLimitSlider.value)"
									   focusEnabled="false" maximum="100" minimum="0" value="100"/>
							<s:Label width="55" fontWeight="bold"
									 text="{'hi: ' + upperLimitSlider.value.toString()}"/>
						</s:HGroup>
					
					<s:VGroup width="100%">
						<s:CheckBox id="limitBrightnessCheckBox" label="limit brightness"
									change="limitBrightnessCheckBox.selected ? main.webcam.limitBrightness(limitBrightnessSlider.value) : main.webcam.limitBrightness(0);"
									focusEnabled="false"
									toolTip="{Tooltips.limitBrightnessCheckBox}"/>
						<s:HGroup visible="{limitBrightnessCheckBox.selected}" width="100%"
								  includeInLayout="{limitBrightnessCheckBox.selected}">
							<s:Rect width="13"/>
							<s:HSlider id="limitBrightnessSlider" width="100%"
									   changeEnd="limitBrightnessSlider.value == 0 ? limitBrightnessSlider.value = 1 : null; main.webcam.limitBrightness(limitBrightnessSlider.value);"
									   focusEnabled="false" maximum="50" minimum="-50" value="1"/>
							<s:Label width="35" fontWeight="bold"
									 text="{limitBrightnessSlider.value.toString()}"/>
						</s:HGroup>
					</s:VGroup>
				-->
					
					<s:VGroup width="100%">
						<s:CheckBox id="faderCheckBox" label="fade"
									change="{WebCam.fade = faderCheckBox.selected}"
									focusEnabled="false" toolTip="{Tooltips.fadeCheckBox}"/>
						<s:HGroup visible="{faderCheckBox.selected}" width="100%"
								  includeInLayout="{faderCheckBox.selected}">
							<s:Rect width="13"/>
							<s:HSlider id="fadeStrengthSlider" width="100%"
									   changeEnd="WebCam.fadeStrength(fadeStrengthSlider.value);"
									   focusEnabled="false" maximum="200" minimum="1"
									   snapInterval=".1" value="10"/> 
							<s:Label width="35" fontWeight="bold"
									 text="{fadeStrengthSlider.value.toString()}"/>
						</s:HGroup>
					</s:VGroup>
					<s:VGroup width="100%">
						<s:HGroup>							
							<s:CheckBox id="hueCheckBox" label="color shift"
										change="{WebCam.hueEnabled = hueCheckBox.selected;}"
										focusEnabled="false" toolTip="{Tooltips.hueCheckBox}"/>
							<s:Group visible="{hueCheckBox.selected}" width="{hueCheckBox.height}"
									 height="{hueCheckBox.height}">
								<s:Rect width="100%" height="100%">
									<s:fill>
										<s:SolidColor id="hueShiftColor" color="gray"/>
									</s:fill>
								</s:Rect>
							</s:Group>
						</s:HGroup>
						
						<s:HGroup visible="{hueCheckBox.selected}" width="100%"
								  includeInLayout="{hueCheckBox.selected}"
								  toolTip="{Tooltips.hueCheckBox}">
							<s:Label width="40" color="cyan" fontWeight="bold"
									 text="{(-hueSliderR.value).toString()}" textAlign="right"/>
							<s:HSlider id="hueSliderR" width="100%"
									   change="brightnessSlider.value = hueSliderR.value + hueSliderG.value + hueSliderB.value; updateHueColor()"
									   changeEnd="WebCam.hueShift(hueSliderR.value, hueSliderG.value, hueSliderB.value);"
									   focusEnabled="false" maximum="255" minimum="-255" value="0"/> 
							<s:Label width="35" color="red" fontWeight="bold"
									 text="{hueSliderR.value.toString()}"/>
						</s:HGroup>
						
						<s:HGroup visible="{hueCheckBox.selected}" width="100%"
								  includeInLayout="{hueCheckBox.selected}"
								  toolTip="{Tooltips.hueCheckBox}">
							<s:Label width="40" color="0xff00ff" fontWeight="bold"
									 text="{(-hueSliderG.value).toString()}" textAlign="right"/>
							<s:HSlider id="hueSliderG" width="100%"
									   change="brightnessSlider.value = hueSliderR.value + hueSliderG.value + hueSliderB.value; updateHueColor()"
									   changeEnd="WebCam.hueShift(hueSliderR.value, hueSliderG.value, hueSliderB.value);"
									   focusEnabled="false" maximum="255" minimum="-255" value="0"/> 
							<s:Label width="35" color="green" fontWeight="bold"
									 text="{hueSliderG.value.toString()}"/>
						</s:HGroup>
						
						<s:HGroup visible="{hueCheckBox.selected}" width="100%"
								  includeInLayout="{hueCheckBox.selected}"
								  toolTip="{Tooltips.hueCheckBox}">
							<s:Label width="40" color="0xffff00" fontWeight="bold"
									 text="{(-hueSliderB.value).toString()}" textAlign="right"/>
							<s:HSlider id="hueSliderB" width="100%"
									   change="brightnessSlider.value = hueSliderR.value + hueSliderG.value + hueSliderB.value; updateHueColor()"
									   changeEnd="WebCam.hueShift(hueSliderR.value, hueSliderG.value, hueSliderB.value);"
									   focusEnabled="false" maximum="255" minimum="-255" value="0"/> 
							<s:Label width="35" color="blue" fontWeight="bold"
									 text="{hueSliderB.value.toString()}"/>
						</s:HGroup>
						<s:HGroup visible="{hueCheckBox.selected}" width="100%"
								  includeInLayout="{hueCheckBox.selected}"
								  toolTip="{Tooltips.hueCheckBox}">
							<s:Rect width="40"/>
							<s:HSlider id="brightnessSlider" width="100%"
									   change="moveBrightnessSlider()"
									   changeEnd="changeBrightness(); updateHueColor()"
									   changeStart="oldR = hueSliderR.value; oldG = hueSliderG.value; oldB = hueSliderB.value; oldBright = brightnessSlider.value"
									   focusEnabled="false" maximum="255" minimum="-255" value="0"/> 
							<s:Label width="35" color="white" fontWeight="bold"
									 text="{brightnessSlider.value.toString()}"/>
						</s:HGroup>
						<s:HGroup visible="{hueCheckBox.selected}" width="100%"
								  includeInLayout="{hueCheckBox.selected}">
							<s:Rect width="40"/>
							<s:Button visible="{hueCheckBox.selected}" width="{hueSliderB.width}"
									  label="reset colors"
									  click="hueSliderR.value = hueSliderG.value = hueSliderB.value = 0; brightnessSlider.value = 0; WebCam.hueShift(0,0,0); updateHueColor()"
									  focusEnabled="false" includeInLayout="{hueCheckBox.selected}"
									  skinClass="skins.LPLButtonSkin"/>
						</s:HGroup>
					</s:VGroup>
				</s:VGroup>
				
				
				<s:Rect height="10"/>
				
				<s:Label id="webcamOptsLabel" buttonMode="true"
						 click="toggleVisible(webcamOpts, webcamOptsLabel);" color="cyan"
						 fontSize="14" fontWeight="bold" text="webcam options [ - ]"/>
				
				<s:VGroup id="webcamOpts" width="100%">
					<s:VGroup width="100%">
						<s:DropDownList id="camSelector" width="100%" buttonMode="true"
										change="selectCamera(camSelector.selectedItem as String)"
										contentBackgroundColor="black" focusColor="cyan"
										focusEnabled="false" rollOverColor="0x333333"
										selectionColor="0x555555" skinClass="skins.LPLDropdownSkin"
										enabled.painting="false"/>
					</s:VGroup>
					<s:DropDownList id="resolutionSelector" width="100%" buttonMode="true"
									change="LightPaintLiveDesktop.getInstance().captureSizeChange(event)"
									color="white" contentBackgroundColor="black" focusColor="cyan"
									focusEnabled="false" rollOverColor="0x333333"
									selectedIndex="{resolutionSelectedIndex}"
									selectionColor="0x555555" skinClass="skins.LPLDropdownSkin"
									toolTip="{Tooltips.resolutionSelector}"
									enabled.painting="false">
						<s:ArrayCollection>
							<fx:String>1920 x 1080</fx:String>
							<fx:String>1280 x 720</fx:String>
							<fx:String>800 x 600</fx:String>
							<fx:String>720 x 480</fx:String>
							<fx:String>400 x 300</fx:String>
							<fx:String>160 x 90</fx:String>
						</s:ArrayCollection>
					</s:DropDownList>
	
					<s:Rect/>
					
					<s:VGroup width="100%" toolTip="{Tooltips.fpsSlider}">
						<s:Label text="{'target fps [ ' + Math.round(fpsSlider.value) + ' ]' + ' cam fps [' + currentFPS + ']'}"/>
						<s:HSlider id="fpsSlider" width="100%"
								   changeEnd="main.webcam.fps = fpsSlider.value" maximum="60"
								   minimum="1" value="24"
								   enabled.painting="false"/>
					</s:VGroup>
				</s:VGroup>
			<!--	
				<s:Rect height="10"/>
				
				<s:Label id="recordingOptsLabel" buttonMode="true"
						 click="toggleVisible(recordingOpts, recordingOptsLabel);" color="cyan"
						 fontSize="14" fontWeight="bold" text="recording options [ - ]"/>
				<s:VGroup id="recordingOpts" width="100%">
						
					<s:CheckBox id="recordCheckBox" label="capture video"
								change="{WebCam.record = recordCheckBox.selected; if(!WebCam.record)fullresCheckbox.selected = saveToDiskCheckbox.selected = main.webcam.fs.saveToDisk = main.webcam.fs.fullResVideo = false}"
								color="white" focusEnabled="false"
								toolTip="{Tooltips.recordCheckBox}"
								enabled.painting="false"/>
					<s:CheckBox id="fullresCheckbox" label="save full res video"
								change="main.webcam.fs.fullResVideo = fullresCheckbox.selected"
								enabled="{recordCheckBox.selected}" focusEnabled="false"
								toolTip="{Tooltips.fullresCheckBox}"
								enabled.painting="false"/>
					<s:CheckBox id="saveToDiskCheckbox" label="write video to disk"
								change="main.webcam.fs.saveToDisk = saveToDiskCheckbox.selected"
								enabled="{recordCheckBox.selected}" focusEnabled="false"
								toolTip="{Tooltips.saveToDiskCheckBox}"
								enabled.painting="false"/>
				</s:VGroup>
			-->
				<s:Rect height="10"/>
				<s:Label id="viewOptsLabel" buttonMode="true"
						 click="toggleVisible(viewOpts, viewOptsLabel);" color="cyan" fontSize="14"
						 fontWeight="bold" text="view options [ - ]"/>
				<s:VGroup id="viewOpts" width="100%">
					<s:Button id="popoutBtn" label="pop out canvas" buttonMode="true"
							  click="{main.openPopWindow()}" skinClass="skins.LPLButtonSkin"
							  toolTip="{Tooltips.popoutBtn}"
							  enabled.painting="false"/>
					<s:CheckBox id="dimControlsCheckBox" label="dim controls"
								change="dimControlsCheckBox.selected ? main.toPainting.alphaTo = .2 : main.toPainting.alphaTo = 1"
								color="white" focusEnabled="false" selected="true"
								toolTip="{Tooltips.dimControlsCheckBox}"
								enabled.painting="false"/>
	
				</s:VGroup>
				<s:Rect/>
			</s:VGroup>
		</s:VGroup>
	
</s:Group>
