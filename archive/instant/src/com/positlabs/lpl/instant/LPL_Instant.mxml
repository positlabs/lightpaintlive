<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:my="*"
			   width="100%" height="100%" minWidth="800" minHeight="600" backgroundColor="black"
			   creationComplete="setup()" resize="resizeHandler()" keyDown="keyDown(event)" keyUp="keyUp(event)">
	
	<fx:Script>
		<![CDATA[
			import spark.events.IndexChangeEvent;
			import spark.filters.GlowFilter;
			
			private static var _singleton : LPL_Instant;
			
			[Bindable]
			private var webcam : WebCam;
			private var setupComplete : Boolean;
			private var captureSize : Point = new Point(800, 600);
			
			private var ctrlDown:Boolean;
			
			public function setup():void{
				webcam = new WebCam(captureSize.x, captureSize.y);
				wc.addChild(webcam);
				
				setupComplete = true;
				resizeHandler();
				
				focusManager.setFocus(dummyBtn);

			}
			
			private function fullscreen():void{
				if( stage.displayState == StageDisplayState.NORMAL ){
					stage.displayState = StageDisplayState.FULL_SCREEN;
					fullscreenBtn.label = "exit fullscreen";
				}else{
					stage.displayState = StageDisplayState.NORMAL;
					fullscreenBtn.label = "fullscreen";
				}
			}
			
			protected function resizeHandler():void{
				
				if(setupComplete){
					var xScale : Number = width/captureSize.x;
					var yScale : Number = height/captureSize.y;
					
					var scale : Number = 0;
					if(xScale < yScale)
						scale = xScale;
					else scale = yScale;
					
					wc.scaleX = scale;
					wc.scaleY = scale;
				}
				
			}
			
			protected function captureSizeChange(e:IndexChangeEvent):void{
				
				currentState = "notPainting";
				webcam.stopPainting();
				newPainting();
				wc.removeChild(webcam);
				
				switch(e.newIndex){
					case 0:
						captureSize.x = 1280;
						captureSize.y = 720;
						break;
					case 1:
						captureSize.x = 800;
						captureSize.y = 600;
						break;
					case 2:
						captureSize.x = 400;
						captureSize.y = 300;
						break;
				}
				
				webcam = new WebCam(captureSize.x, captureSize.y);
				wc.addChild(webcam);
				resizeHandler();
			}
			
			private function newPainting():void{
				webcam.newPainting(); 
				newBtn.enabled = saveBtn.enabled = false;
			}
			
			private function togglePainting():void{
				if(currentState == "notPainting"){
					webcam.startPainting(); 
					currentState = 'painting'; 
					helpScreen.visible = false;
					newBtn.enabled = saveBtn.enabled = true;
				}else{
					webcam.stopPainting(); 
					currentState = 'notPainting'; 
				}
			}
			
			public static function notifyCamera():void{
				getInstance().helpScreen.visible = false;
				getInstance().controls.enabled = false;
				
				// show notification
				getInstance().noCamNotify.visible = true;
			}
			
			public static function getInstance(): LPL_Instant{
				return _singleton;
			}
			
			private function keyUp(e:KeyboardEvent):void{
				if(e.keyCode == Keyboard.CONTROL)
					ctrlDown = false;
			}
			private function keyDown(e:KeyboardEvent):void{
				trace(e.keyCode);

				if(e.keyCode == Keyboard.ESCAPE && stage.displayState == StageDisplayState.FULL_SCREEN_INTERACTIVE)
					fullscreen();
				
				switch(e.keyCode){
					case Keyboard.S:
						if(saveBtn.enabled && editControls.enabled && ctrlDown)
							webcam.savePainting();
						break;
					case Keyboard.N:
						if(newBtn.enabled && editControls.enabled && ctrlDown)
							newPainting();
						break;
					case Keyboard.SPACE:
						togglePainting();
						break;
					case Keyboard.ENTER:
						if(currentState == "notPainting")
							if(webcam.previewActive == false)
								webcam.preview(true);
							else webcam.preview(false);
						break;
					case Keyboard.UP:
						intensitySlider.value ++;
						break;
					case Keyboard.DOWN:
						intensitySlider.value --;
						break;
					case Keyboard.CONTROL:
						ctrlDown = true;
						break;
				}
			}
		]]>
	</fx:Script>
	
	<s:transitions>
		<s:Transition fromState="notPainting" toState="painting">
			<s:Fade duration="700" target="{controls}"/>
		</s:Transition>
		<s:Transition fromState="painting" toState="notPainting">
			<s:Fade duration="1200" target="{controls}"/>
		</s:Transition>
	</s:transitions>
	
	<s:states>
		<s:State name="notPainting" />
		<s:State name="painting" />
	</s:states>
	
	<s:SpriteVisualElement id="wc" width="{webcam.width}" height="{webcam.height}" horizontalCenter="0" verticalCenter="0"/>
	
	<s:Group id="controls" width="100%" height="100%" alpha.painting=".2" alpha.notPainting="1" >
		
		<s:Group bottom="0" width="100%" height="50">
			<s:Rect width="100%" height="100%">
				<s:fill>
					<s:SolidColor alpha=".8" color="0x000000"/>
				</s:fill>
			</s:Rect>
		</s:Group>
		
		<s:Button id="fullscreenBtn" label="fullscreen" click="fullscreen()" right="5" top="5" height="30" focusEnabled="false" skinClass="com.positlabs.lpl.skins.LPLButtonSkin"/>
		
		<s:Label right="10" bottom="5" buttonMode="true" click="helpScreen.visible = true;"
				 color="white" fontSize="36" fontWeight="bold" text="?" toolTip="Click for help!"/>
		
		<s:Image id="lplLogo" source="@Embed('assets/lplHeader_sm.png')" left="10" bottom="10" click="{navigateToURL(new URLRequest('http://lightpaintlive.com'));}" buttonMode="true" mouseOut="{lplLogo.filters = [];}"
				 mouseOver="{lplLogo.filters = [new spark.filters.GlowFilter()];}" toolTip="Visit LightPaintLive.com"/>
		
		<s:HGroup bottom="10" gap="7" horizontalCenter="0" verticalAlign="middle">
			<s:Button id="startBtn" height="30" toolTip="spacebar to start/stop"
					  label.notPainting="start"
					  click="togglePainting()"
					  label.painting="stop" focusEnabled="false"
					  skinClass="com.positlabs.lpl.skins.LPLButtonSkin"/>
			
			<s:Rect width="15"/>
			
			<s:VGroup horizontalAlign="center">
				<s:HSlider id="intensitySlider" change="webcam.intensity = intensitySlider.value;"
						   maximum="100" minimum="0" value="50" focusEnabled="false" toolTip="up/down arrows to increase/decrease"/>
				<s:Label color="white" text="light-sensitivity"/>
			</s:VGroup>
			
			<s:Rect width="15"/>
			
			<s:HGroup id="editControls" enabled.painting="false">
				<s:Button id="newBtn" height="30" width="50" label="new" click="newPainting()" enabled="false" toolTip="ctrl + n" focusEnabled="false" skinClass="com.positlabs.lpl.skins.LPLButtonSkin"/>
				<s:Button id="saveBtn" height="30" width="50" label="save" click="webcam.savePainting();" enabled="false" toolTip="ctrl + s" focusEnabled="false" skinClass="com.positlabs.lpl.skins.LPLButtonSkin"/>
				<s:DropDownList buttonMode="true" id="resolutionSelector"  width="100" height="30" selectedIndex="1"
								change="captureSizeChange(event)" color="white"
								contentBackgroundColor="black" focusColor="cyan"
								focusEnabled="false" rollOverColor="0x333333" 
								selectionColor="0x555555" skinClass="com.positlabs.lpl.skins.LPLDropdownSkin">
					<s:ArrayCollection>
						<fx:String>1280 x 720</fx:String>
						<fx:String>800 x 600</fx:String>
						<fx:String>400 x 300</fx:String>
					</s:ArrayCollection>
				</s:DropDownList>
				
				
				<s:Button id="dummyBtn" includeInLayout="false"/>
			</s:HGroup>
		</s:HGroup>
		
	</s:Group>
	
	
	<s:Group id="helpScreen" horizontalCenter="0" verticalCenter="0">
		<s:TextArea editable="false" contentBackgroundAlpha=".8" contentBackgroundColor="0x00000" width="300" height="300" color="white" paddingTop="20" paddingRight="20" paddingBottom="20" paddingLeft="20">
			<s:content>
				<s:span fontWeight="bold">Instructions:</s:span><s:br />
				1. Allow flash to access camera.<s:br />
				2. Click the start button.<s:br />
				3. Move the light-intensity slider.<s:br />
				4. If that doesn't work, right-click (anywhere in the app) > settings > camera settings > pick the camera you want to use.
				<s:br /><s:br />This app requires a webcam (obviously), and is best used in a dark room with a hand-held light source.
				<s:br /><s:br />When saving images, keep the file extension on the end (yourfilename<s:span fontWeight="bold">.jpg</s:span>)
			</s:content>
		</s:TextArea>
		<s:Label id="closeBtn" text="OK" fontWeight="bold" color="white" fontSize="36" click="helpScreen.visible = false;" buttonMode="true" bottom="20" left="20"/>
	</s:Group>	

	<s:Label id="noCamNotify" visible="false" horizontalCenter="0" verticalCenter="0" text="Camera not detected! Please install drivers, check camera connection, and restart the program." fontWeight="bold" color="0xff5555" fontSize="16"/>

</s:Application>
